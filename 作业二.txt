//作业1
//（1）	找出从1-10000的所有质数，将找出的质数存入可变数组，
     //对数组进行正反排序并输出结果(采用5种以上的方法实现)；
var primes=[Int]()
for i in 2...100{
	var isPrime=true
	for j in 2..<i{
       if i%j==0{ isPrime=false }
	}
	if isPrime{ primes.append(i) }
}
primes.sort(by:{(x,y) in return x>y}) //method 1
print(primes)
primes.sort(by: {(x,y) in x>y}) // method 2
print(primes)
primes.sort( by:{ return $0>$1 } ) //method 3
print(primes)
primes.sort{ $0>$1 } //method 4
print(primes)
primes.sort(by: >) //method 5
print(primes)

//作业2

//性别的枚举
enum Gender: Int {
  case male
  case famale
  case unknow
  //重载>操作符，方便后面排序使用
  static func >(lhs: Gender,rhs: Gender)->Bool {
  return lhs.rawValue < rhs.rawValue
 }
}

//定义Person类
//人类
class Person: CustomStringConvertible {
  var firstName: String 
  var lastName: String
  var age: Int
  var gender: Gender
  var fullName: String{
    get {
      return firstName+lastName
   }
 }

  //构造方法
  init(firstName: String,lastName: String,age: Int,gender: Gender){
    self.firstName=firstName
    self.lastName=lastName
    self.age=age
    self.gender=gender
 }

  convenience init(firstName: String,age: Int,gender: Gender){
    self.init(firstName: firstName,lastName: "",age: age,gender: gender)
  }

  convenience init(firstName: String){
    self.init(firstName: firstName,age: 0,gender: Gender.unknow)
  }
  
  required convenience init(){
    self.init(firstName: "")
  }
	
	//重载==
  static func ==(lhs: Person,rhs: Person)->Bool{
    return lhs.fullName==rhs.fullName && lhs.age==rhs.age && lhs.gender==rhs.gender
  }
  //重载!=
  static func !=(lhs: Person,rhs: Person)->Bool{
    return !(lhs==rhs)
  }
	//实现CustomStringConvertible协议中的计算属性，可以使用print直接输出对象内容
  var description: String{
    return "fullName: \(self.fullName),age: \(self.age),gender: \(self.gender)"
  }
}	
var p1=Person(firstName: "zhang")
var p2=Person(firstName: "zhang",age:20,gender: Gender.male)
print(p1)  //输出fullName: 张， age:20,gender: male
print(p1 == p2)
print(p1 != p2)


//定义Teacher类
class Teacher: Person{
  var title: String
  init(title:String,firstName: String,lastName: String,age: Int,gender: Gender){
     self.title=title
     super.init(firstName: firstName,lastName: lastName,age: age,gender: gender)
  }
  init(title: String){
     self.title=title
     super.init(firstName:"",lastName:"",age: 0,gender:Gender.unknow)
  }
  convenience required init(){
     self.init(title:"")
  }
  //重写父类的计算属性
  override var description: String{ 
    return "title:\(self.title),fullName: \(self.fullName),age: \(self.age),gender: \(self.gender)"
  }
}
  var t1=Teacher(title:"hello")
  print(t1)


//定义Student类
class Student: Person{
  var stuNo: Int
  init(stuNo: Int,firstName: String,lastName: String,age: Int,gender: Gender){
     self.stuNo=stuNo
     super.init(firstName: firstName,lastName: lastName,age: age,gender: gender)
  }
  init(stuNo: Int){
     self.stuNo=stuNo
     super.init(firstName:"",lastName:"",age: 0,gender:Gender.unknow)
  }
  convenience required init(){
     self.init(stuNo:0)
  }
  //重写父类的计算属性
  override var description: String{ 
    return "stuNo:\(self.stuNo),fullName: \(self.fullName),age: \(self.age),gender: \(self.gender)"
  }
}
  var s1=Student(stuNo:2016110307)
  print(s1)

//初始化一个空的Person数组
var array=[Person]()

//生成5个Person对象
for i in 1...5{
  let temp=Person(firstName: "zhang",lastName: "\(i)",age: 20,gender: Gender.male)
  array.append(temp)
}
//生成5个Teacher对象
for i in 1...5{
  let temp=Teacher(title: "hhh",firstName: "zhao",lastName: "\(i)",age: 20,gender: Gender.male)
  array.append(temp)
}
//生成5个Student对象
for i in 1...5{
  let temp=Student(stuNo: 201611030+i,firstName: "qian",lastName: "\(i)",age: 20,gender: Gender.male)
  array.append(temp)
}

//定义一个字典
var dict=["Person":0,"Teacher":0,"Student":0]

for item in array{
  if item is Teacher{
   dict["Teacher"]!+=1
  }else if item is Student {
   dict["Student"]!+=1
  }else {
   dict["Person"]!+=1
  }
}

//输出字典值
for (key,value) in dict{
  print("\(key) has \(value) items")
}

//原始数组
for item in array{
  print(item)
}

//根据age从大到小排序
array.sort{return $0.age>$1.age}
for item in array{
  print(item)
}

//根据全名从前到后排序
array.sort{return $0.fullName<$1.fullName}
for item in array{
  print(item)
}

//根据gender和age从大到小排序
array.sort{return ($0.gender>$1.gender)&&($0.age>$1.age)}
for item in array{
  print(item)
}